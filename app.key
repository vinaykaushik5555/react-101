

        List<String> productCodesToFind = Arrays.asList("A", "B");
        List<String> guidsWithProductCodes = findGuidsWithProductCodes(json, productCodesToFind);

    }

    public static List<String> findGuidsWithProductCodes(String json, List<String> productCodesToFind) {
        List<String> guids = new ArrayList<>();

        try {
            ObjectMapper objectMapper = new ObjectMapper();
            JsonNode rootNode = objectMapper.readTree(json);

            for (JsonNode node : rootNode) {
                JsonNode productRules = node.get("productRules");
                if (productRules != null && productRules.isObject()) {
                    for (String productCode : productCodesToFind) {
                        if (containsProductCode(productRules, productCode)) {
                            guids.add(node.get("guid").asText());
                            break; // Break from inner loop, no need to check other product codes
                        }
                    }
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }

        return guids;
    }

    private static boolean containsProductCode(JsonNode productRules, String productCode) {
        for (JsonNode keyNode : productRules) {
            if (keyNode.isArray()) {
                for (JsonNode valueNode : keyNode) {
                    if (productCode.equals(valueNode.asText())) {
                        return true;
                    }
                }
            }
        }
        return false;
    }
}
